---
#- name: Ensure set LANGS
#  shell: "localectl set-locale LANG='{{ locale }}' LC_CTYPE='{{ locale }}' LC_NUMERIC='{{ locale }}' LC_TIME='{{ locale }}' LC_COLLATE='{{ locale }}' LC_MONETARY='{{ locale }}' LC_MESSAGES='{{ locale }}' LC_PAPER='{{ locale }}' LC_NAME='{{ locale }}' LC_ADDRESS='{{ locale }}' LC_TELEPHONE='{{ locale }}' LC_MEASUREMENT='{{ locale }}' LC_IDENTIFICATION='{{ locale }}'"

#- name: Reinstall glibc (Hun support)
#  command: "yum reinstall -y glibc-common"

- block:
  - name: Make sure epel repo is installed
    yum:
      name: "epel-release"
      state: present
  - name: Install Code Ready (RedHat)
    shell:
      cmd: "subscription-manager repos --enable codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-x86_64-rpms"
    when: ansible_distribution == "RedHat"

  - name: Enable Powertools (for PostGIS)
    ini_file:
      path: /etc/yum.repos.d/CentOS-PowerTools.repo
      section: PowerTools
      option: enabled
      value: "1"
    when:
      - ansible_distribution_major_version is version('8', '>=')
      - ansible_distribution != 'RedHat'
    register: yum_cache_update

  - name: yum update cache
    yum:
      update_cache: yes
    when: yum_cache_update.changed
  when:
    - installpostgis
#    - ansible_distribution != "RedHat"

- name: Disable original postgresql dnf module
  blockinfile:
    path: /etc/dnf/modules.d/postgresql.module
    create: yes
    block : |
      [postgresql]
      name=postgresql
      profiles=
      state=disabled
      stream=
  when:
    - ansible_facts['distribution_major_version'] == "8"
  register: dnf_pgsql

- name: dnf cache update
  dnf:
    update_cache: yes
  when: dnf_pgsql.changed

- name: install repo for PostgreSQL
  yum:
#    name: "https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present
  when:
    - outgoing_proxy is not defined

- name: Set PostgreSQL dotless version fact
  set_fact:
    __postgresql_version_dotless: "{{ postgresql_version | replace('.', '') | replace('-', '') }}"
    __postgresql_command_sep: "{{ postgresql_version is version('10', '>=') | ternary('-', '') }}"


- name: install python module for Postgres
  yum:
    name: "{{ ansible_facts['distribution_major_version'] is version('8', '>=') | ternary('python3-psycopg2', 'python-psycopg2') }}"
    state: present

- name: "Install PostgreSQL version {{ postgresql_version }}"
  yum:
    name:
      - "postgresql{{ __postgresql_version_dotless }}-server"
      - "postgresql{{ __postgresql_version_dotless }}-contrib"
      - "postgresql{{ __postgresql_version_dotless }}-libs"
      - "postgresql{{ __postgresql_version_dotless }}"
      - "pg_repack{{ __postgresql_version_dotless }}"
    state: present

- name: Install PostGIS
  yum:
    name: "{{ posgis_to_install }}"
    state: present
  when:
    - installpostgis

- name: "Enable init.d script for {{ postgresql_version }}"
  shell: "chkconfig --level 2345 postgresql-{{ postgresql_version }} on"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "7"

- name: Check DB init state
  stat:
    path: /var/lib/pgsql/{{ postgresql_version }}/data/pg_tblspc
  register: dbinit

- name: Create database
  command: "/usr/pgsql-{{ postgresql_version }}/bin/postgresql{{__postgresql_command_sep }}{{ __postgresql_version_dotless }}-setup initdb
          creates=/var/lib/pgsql/{{ postgresql_version }}/data/postgresql.conf"
  become: true
  #become_user: "{{ postgresql_user_name }}"
  when: not dbinit.stat.exists

- name: update environment variables in UNIX account postgres
  blockinfile:
    create: yes
    dest: /var/lib/pgsql/.pgsql_profile
    block: |
      export PGHOST=/tmp PAGER=less PGDATA=/var/lib/pgsql/{{ postgresql_version }}/data
    owner: "{{ postgresql_user_name }}"
    group: "{{ postgresql_user_name }}"
    marker: "#{mark} ANSIBLE MANAGED BLOCK General"
  become: true

- name: start postgresql service
  service:
    name: "postgresql-{{ postgresql_version }}"
    state: started
    enabled: true
  become: true

- name: Gather the rpm package facts
  package_facts:
    manager: auto
  when: open_firewalld

- name: Populate service facts
  service_facts:

- name: Firewalld Open PostgreSQL ports
  firewalld:
    service: postgresql
    permanent: yes
    immediate: yes
    state: enabled
  when:
    - open_firewalld
    - ansible_facts.services['firewalld.service'].state == "running"

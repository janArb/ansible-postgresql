# postgres/tasks/main.yml
---
- name: Include distribution dependent variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_architecture }}.yml"
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Install language files
  ansible.builtin.package:
    name: "{{ postgresql_langpacks }}"
  tags:
    - langsources
    - setlanguages

- name: Check LANG env
  ansible.builtin.set_fact:
    current_locale: "{{ lookup('env', 'LANG') | default('notexists') }}"
  tags:
    - setlanguages

- name: Lookup LANG
  ansible.builtin.set_fact:
    locale: "{{ lookup('env', 'LANG') | default('en_US.UTF-8') }}"
  tags:
    - setlanguages

- name: Ensure all locales are exists
  community.general.locale_gen:
    name: "{{ item }}"
    state: present
  with_items: "{{ postgresql_locales }}"
  when: ansible_os_family == "Debian"
  tags:
    - genlocales
    - setlanguages

- name: Ensure set LANGS
  ansible.builtin.shell: "localectl set-locale LANG='{{ locale }}' LC_CTYPE='{{ locale }}' \
  LC_NUMERIC='{{ locale }}' LC_TIME='{{ locale }}' LC_COLLATE='{{ locale }}' \
  LC_MONETARY='{{ locale }}' LC_MESSAGES='{{ locale }}' LC_PAPER='{{ locale }}' \
  LC_NAME='{{ locale }}' LC_ADDRESS='{{ locale }}' LC_TELEPHONE='{{ locale }}' \
  LC_MEASUREMENT='{{ locale }}' LC_IDENTIFICATION='{{ locale }}'"
  when: current_locale == 'notexists'
  tags:
    - stelanguages

- name: Set cluster_name fact
  ansible.builtin.set_fact:
    postgresql_cluster_name: "{{ postgresql_cluster_name_default }}"
  when: postgresql_cluster_name is not defined

- name: Set conf dir fact
  ansible.builtin.set_fact:
    postgresql_conf_dir: "{{ postgresql_conf_dir_default }}"
  when: postgresql_conf_dir is not defined

- name: Set pgdata fact
  ansible.builtin.set_fact:
    postgresql_pgdata: "{{ postgresql_pgdata_default }}"
  when: postgresql_pgdata is not defined

- name: Include install tasks for RedHat
  ansible.builtin.include_tasks: redhat.yml
  when:
    - ansible_os_family == "RedHat"

- name: Include install tasks for Ubuntu
  ansible.builtin.include_tasks: ubuntu.yml
  when:
    - ansible_distribution == "Ubuntu"

- name: Include install tasks for Debian
  ansible.builtin.include_tasks: debian.yml
  when:
    - ansible_distribution == "Debian"

- name: Include install tasks for ARM
  ansible.builtin.include_tasks: arm.yml
  when:
    - ansible_architecture == "armv7l" or ansible_architecture == "armv7" or ansible_architecture == "aarch64"

- name: Gather the rpm package facts
  ansible.builtin.package_facts:
    manager: auto
  when: postgresql_open_firewall

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Include tasks for Firewalld
  ansible.builtin.include_tasks: firewalld.yml
  when:
    - postgresql_open_firewall
    - ansible_os_family == "RedHat"
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == "running"

- name: Include tasks for UFW
  ansible.builtin.include_tasks: ufw.yml
  when:
    - postgresql_open_firewall
    - ansible_distribution == "Ubuntu"
    - ansible_facts.services['ufw.service'] is defined
    - ansible_facts.services['ufw.service'].state == "running"

- name: Include Config's tasks
  ansible.builtin.include_tasks: config.yml

- name: Include database managers's tasks
  ansible.builtin.include_tasks: databases.yml

- name: Include user manager's tasks
  ansible.builtin.include_tasks: users.yml

- name: Include pgrman's tasks
  ansible.builtin.include_tasks: pgrman.yml
  when:
    - postgresql_install_pg_rman

- name: Include pgaudit's tasks
  ansible.builtin.include_tasks: pgaudit.yml
  when:
    - postgresql_install_pg_audit

- name: Include pgbackrest's tasks
  ansible.builtin.include_tasks: pgbackrest.yml
  when:
    - postgresql_install_pgbackrest
  tags:
    - pgbackrest

- name: Check is replication necessary
  ansible.builtin.stat:
    path: "{{ postgresql_pgdata }}/standby.signal"
  register: standby_signal
  when:
    - postgresql_init_replication

- name: Setting up the password file with password
  ansible.builtin.lineinfile:
    path: "{{ postgresql_home }}/.pgpass"
    owner: "{{ postgresql_user_name }}"
    group: "{{ postgresql_user_name }}"
    mode: '0600'
    line: "{{ postgresql_replication_master }}:{{ postgresql_replication_master_port }}:replication:replicator:{{ postgresql_replication_password }}"
    state: present
    create: true
  when:
    - postgresql_replication_password is defined and postgresql_network_password_mode!='trust' and postgresql_replication_master is defined

- name: Ensure there is no password related to the host in the password file
  ansible.builtin.lineinfile:
    path: "{{ postgresql_home }}/.pgpass"
    owner: "{{ postgresql_user_name }}"
    group: "{{ postgresql_user_name }}"
    mode: '0600'
    regexp: "^{{ postgresql_replication_master }}:{{ postgresql_replication_master_port }}:replication"
    state: absent
  when:
    - postgresql_network_password_mode=='trust' and postgresql_replication_master is defined


- name: Include replication's tasks
  ansible.builtin.include_tasks: initreplication.yml
  when:
    - postgresql_init_replication
    - not standby_signal.stat.exists

- name: Install crontab
  ansible.builtin.package:
    name: "{{ (ansible_os_family == 'RedHat') | ternary('crontabs', 'cron') }}"
  tags:
    - cron
    - cronjobs

# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html
- name: Set cronjobs
  ansible.builtin.cron:
    name: "{{ item.key }}"
    day: "{{ item.value.day | default(omit) }}"
    weekday: "{{ item.value.weekday | default(omit) }}"
    month: "{{ item.value.month | default(omit) }}"
    minute: "{{ item.value.minute | default(omit) }}"
    hour: "{{ item.value.hour | default(omit) }}"
    user: "{{ item.value.user | default(omit) }}"
    job: "{{ item.value.job | default(omit) }}"
    cron_file: "{{ item.value.cron_file | default(omit) }}"
    backup: "{{ item.value.backup | default(omit) }}"
    disabled: "{{ item.value.disabled | default(omit) }}"
    env: "{{ item.value.env | default(omit) }}"
    insertafter: "{{ item.value.insertafter | default(omit) }}"
    insertbefore: "{{ item.value.insertbefore | default(omit) }}"
    reboot: "{{ item.value.reboot | default(omit) }}"
    special_time: "{{ item.value.special_time | default(omit) }}"
    state: "{{ item.value.state | default(omit) }}"
  with_dict: "{{ postgresql_cronjobs }}"
  when: postgresql_cronjobs is defined
  tags:
    - cronjobs
    - cron
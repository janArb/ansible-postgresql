# postgres/tasks/initreplication.yml
---
- name: Check is replication OK
  ansible.builtin.stat:
    path: "{{ postgresql_pgdata }}/standby.signal"
  register: standby_signal_ok

# Redhat
- name: Stop the PostgreSQL cluster service for configuration (RedHat)
  ansible.builtin.service:
    name: "{{ postgresql_service_name }}-{{ postgresql_cluster_name }}"
    state: stopped
  when:
    - not standby_signal_ok.stat.exists
    - ansible_os_family == "RedHat"
    - postgresql_cluster_name != postgresql_cluster_name_default


- name: Stop PostgreSQL service for configuration
  ansible.builtin.service:
    name: "{{ postgresql_service_name }}"
    state: stopped
  when: not standby_signal_ok.stat.exists

- name: Create list of the data folder's content
  ansible.builtin.find:
    path: "{{ postgresql_pgdata }}/"
    patterns: "*"
    file_type: any
  register: datafolder

- name: Remove PSQL data folder's content
  ansible.builtin.file:
    state: absent
    path: "{{ item.path }}"
  loop: "{{ datafolder.files }}"
  no_log: True
  when: not standby_signal_ok.stat.exists

#- name: Recreate PSQL data folder
#  file:
#    state: directory
#    owner: datafolder.stat.uid
#    group: datafolder.stat.gid
#    mode: datafolder.stat.mode
#    path: "{{ postgresql_pgdata }}/"
#  when: not standby_signal_ok.stat.exists

- name: Make pg_basebackup without password
  become_user: "{{ postgresql_user_name }}"
  ansible.builtin.shell: "pg_basebackup \
  -d 'host={{ postgresql_replication_master }} port={{ postgresql_replication_master_port }} user={{ postgresql_replication_user }}' \
  -D {{ postgresql_pgdata }} \
  -U replicator -w -v -R -X stream -C -S {{ postgresql_standby_slot_name }}"
  when:
    - not standby_signal_ok.stat.exists
    - postgresql_network_password_mode == 'trust' or postgresql_network_password_mode == 'trust'

- name: Make pg_basebackup with password
  become_user: "{{ postgresql_user_name }}"
  ansible.builtin.shell: "pg_basebackup \
  -d 'host={{ postgresql_replication_master }} port={{ postgresql_replication_master_port }} user={{ postgresql_replication_user }} \
  password={{ postgresql_replication_password }}' \
  -D {{ postgresql_pgdata }} -U replicator -w -v -R -X stream -C -S {{ postgresql_standby_slot_name }}"
  when:
    - not standby_signal_ok.stat.exists
    - postgresql_network_password_mode != 'trust'
# http://www.postgresql.cn/docs/12/app-pgbasebackup.html

# redoing configuration on the standby because we deleted the
# psql data folder's content for the replication
- name: Include config.yml
  ansible.builtin.include_tasks: config.yml


- name: Final replication Check
  ansible.builtin.stat:
    path: "{{ postgresql_pgdata }}/standby.signal"
  register: standby_signal_ok

- name: Show result
  ansible.builtin.debug:
    msg: "The HOT Standby asyncron replication is ready to use."
  when: standby_signal_ok.stat.exists
